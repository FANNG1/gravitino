/*
 *  Copyright 2024 Datastrato Pvt Ltd.
 *  This software is licensed under the Apache License version 2.
 */

package com.datastrato.gravitino.listener;

import com.datastrato.gravitino.annotation.DeveloperApi;
import com.datastrato.gravitino.listener.event.Event;
import java.util.Map;

/**
 * An interface for event listeners that manage the state of a plugin and process events.
 * Implementers of this interface are responsible for initializing, starting, and stopping the
 * plugin, as well as processing events that occur after operations have been completed.
 *
 * <p>This interface is designed to be flexible, supporting both synchronous and asynchronous event
 * processing through the optional implementation of the {@link SupportsAsync} interface.
 */
@DeveloperApi
public interface EventListenerPlugin {
  /**
   * Initializes the plugin using the provided properties. This initialization step may involve the
   * creation of resources necessary for the plugin's operation.
   *
   * <p>If an exception is thrown during initialization, the Gravitino server will fail to start,
   * indicating a critical failure in setting up the plugin.
   *
   * @param properties A map of properties used to initialize the plugin.
   */
  void init(Map<String, String> properties);

  /**
   * Starts the plugin. This method should be called after {@link #init(Map)} has successfully
   * completed.
   *
   * <p>If an exception is thrown during the start process, the Gravitino server will not start,
   * indicating that the plugin failed to enter a ready state.
   */
  void start();

  /**
   * Stops the plugin and releases any resources that were allocated during the operation of the
   * plugin.
   *
   * <p>The Gravitino server is not affected if an exception is thrown during the stop process.
   * However, resource leaks or other issues may arise from an incomplete stop procedure.
   */
  void stop();

  /**
   * Processes events generated after an operation has finished. This method's invocation behavior
   * depends on whether the listener implements the {@link SupportsAsync} interface.
   *
   * <p>If the {@link SupportsAsync} interface is not implemented, {@code onPostEvent} will be
   * invoked in the same thread that completed the operation. If {@link SupportsAsync} is
   * implemented, {@code onPostEvent} will be invoked in a separate thread, allowing for
   * asynchronous processing.
   *
   * <p>For synchronous listeners, this method may be invoked concurrently by multiple threads,
   * necessitating thread-safe implementations. Asynchronous listeners, on the other hand, will have
   * events processed in a background thread dedicated to event handling.
   *
   * @param event The event to be processed. This includes all events generated by the Gravitino
   *     system, and the plugin should filter and process the events relevant to its operation.
   */
  void onPostEvent(Event event);
}
